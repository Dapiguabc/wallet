/* tslint:disable */
/**
 * This file has been automatically generated by the [capnpc-ts utility](https://github.com/jdiaz5513/capnp-ts).
 */
import * as capnp from "capnp-ts";
import { ObjectSize as __O, Struct as __S } from 'capnp-ts';
import { SubBlock } from "./subblock.capnp";
export const _capnpFileId = "c9a01417cf45e892";
export class BlockMetaData extends __S {
    adoptBlockHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash() { return __S.disown(this.getBlockHash()); }
    getBlockHash() { return __S.getData(0, this); }
    hasBlockHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length) { return __S.initData(0, length, this); }
    setBlockHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    adoptMerkleRoots(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownMerkleRoots() { return __S.disown(this.getMerkleRoots()); }
    getMerkleRoots() { return __S.getList(1, capnp.DataList, this); }
    hasMerkleRoots() { return !__S.isNull(__S.getPointer(1, this)); }
    initMerkleRoots(length) { return __S.initList(1, capnp.DataList, length, this); }
    setMerkleRoots(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    adoptInputHashes(value) { __S.adopt(value, __S.getPointer(2, this)); }
    disownInputHashes() { return __S.disown(this.getInputHashes()); }
    getInputHashes() { return __S.getList(2, capnp.DataList, this); }
    hasInputHashes() { return !__S.isNull(__S.getPointer(2, this)); }
    initInputHashes(length) { return __S.initList(2, capnp.DataList, length, this); }
    setInputHashes(value) { __S.copyFrom(value, __S.getPointer(2, this)); }
    adoptPrevBlockHash(value) { __S.adopt(value, __S.getPointer(3, this)); }
    disownPrevBlockHash() { return __S.disown(this.getPrevBlockHash()); }
    getPrevBlockHash() { return __S.getData(3, this); }
    hasPrevBlockHash() { return !__S.isNull(__S.getPointer(3, this)); }
    initPrevBlockHash(length) { return __S.initData(3, length, this); }
    setPrevBlockHash(value) { __S.copyFrom(value, __S.getPointer(3, this)); }
    getTimestamp() { return __S.getUint64(0, this); }
    setTimestamp(value) { __S.setUint64(0, value, this); }
    adoptBlockOwners(value) { __S.adopt(value, __S.getPointer(4, this)); }
    disownBlockOwners() { return __S.disown(this.getBlockOwners()); }
    getBlockOwners() { return __S.getList(4, capnp.TextList, this); }
    hasBlockOwners() { return !__S.isNull(__S.getPointer(4, this)); }
    initBlockOwners(length) { return __S.initList(4, capnp.TextList, length, this); }
    setBlockOwners(value) { __S.copyFrom(value, __S.getPointer(4, this)); }
    getBlockNum() { return __S.getUint32(8, this); }
    setBlockNum(value) { __S.setUint32(8, value, this); }
    toString() { return "BlockMetaData_" + super.toString(); }
}
BlockMetaData._capnp = { displayName: "BlockMetaData", id: "dd0177e724054c5d", size: new __O(16, 5) };
export class BlockData extends __S {
    getBlockHash() { return __S.getText(0, this); }
    setBlockHash(value) { __S.setText(0, value, this); }
    getBlockNum() { return __S.getUint32(0, this); }
    setBlockNum(value) { __S.setUint32(0, value, this); }
    adoptBlockOwners(value) { __S.adopt(value, __S.getPointer(1, this)); }
    disownBlockOwners() { return __S.disown(this.getBlockOwners()); }
    getBlockOwners() { return __S.getList(1, capnp.TextList, this); }
    hasBlockOwners() { return !__S.isNull(__S.getPointer(1, this)); }
    initBlockOwners(length) { return __S.initList(1, capnp.TextList, length, this); }
    setBlockOwners(value) { __S.copyFrom(value, __S.getPointer(1, this)); }
    getPrevBlockHash() { return __S.getText(2, this); }
    setPrevBlockHash(value) { __S.setText(2, value, this); }
    adoptSubBlocks(value) { __S.adopt(value, __S.getPointer(3, this)); }
    disownSubBlocks() { return __S.disown(this.getSubBlocks()); }
    getSubBlocks() { return __S.getList(3, BlockData._SubBlocks, this); }
    hasSubBlocks() { return !__S.isNull(__S.getPointer(3, this)); }
    initSubBlocks(length) { return __S.initList(3, BlockData._SubBlocks, length, this); }
    setSubBlocks(value) { __S.copyFrom(value, __S.getPointer(3, this)); }
    toString() { return "BlockData_" + super.toString(); }
}
BlockData._capnp = { displayName: "BlockData", id: "f98cc24b685706f9", size: new __O(8, 4) };
export class StateUpdateRequest extends __S {
    adoptBlockHash(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockHash() { return __S.disown(this.getBlockHash()); }
    getBlockHash() { return __S.getData(0, this); }
    hasBlockHash() { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockHash(length) { return __S.initData(0, length, this); }
    setBlockHash(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString() { return "StateUpdateRequest_" + super.toString(); }
}
StateUpdateRequest._capnp = { displayName: "StateUpdateRequest", id: "81129937e582cec3", size: new __O(0, 1) };
export class StateUpdateReply extends __S {
    adoptBlockData(value) { __S.adopt(value, __S.getPointer(0, this)); }
    disownBlockData() { return __S.disown(this.getBlockData()); }
    getBlockData() { return __S.getStruct(0, BlockData, this); }
    hasBlockData() { return !__S.isNull(__S.getPointer(0, this)); }
    initBlockData() { return __S.initStructAt(0, BlockData, this); }
    setBlockData(value) { __S.copyFrom(value, __S.getPointer(0, this)); }
    toString() { return "StateUpdateReply_" + super.toString(); }
}
StateUpdateReply._capnp = { displayName: "StateUpdateReply", id: "9eee6d7c9b2b4f9c", size: new __O(0, 1) };
BlockData._SubBlocks = capnp.CompositeList(SubBlock);
